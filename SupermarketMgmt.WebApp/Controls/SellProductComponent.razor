@inject UseCases.UseCaseInterfaces.IGetProductByIdUseCase GetProductByIdUseCase

@if (productToSell != null)
{
    <EditForm Model="productToSell" OnInvalidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <input type="text" id="name" readonly value="@productToSell.Name" class="form-control" />
        </div>
        <div class="form-group">
            <label for="price">Product Name</label>
            <input type="text" id="price" readonly value="@(string.Format("{0:c}", productToSell.Price))" class="form-control" />
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="@productToSell.Quantity"  class="form-control" />
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
}

@code {
    private Product productToSell;
    private string errorMessage;

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(SelectedProduct != null)
        {
            productToSell = new Product()
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
    }

    public void SellProduct()
    {
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);

        if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough.";
        }

    }
}